sudo apt install cython3
cython3 --embed -o maze2.c maze2.py
1. AFL++ refuses to fuzz the Python program directly because it sees that it is a script and suspects you have made an error. However, even if it did proceed, it would be unlikely to make much progress when fuzzing the Python interpreter plus Python program. Why?
Answer:
AFL++ refuses to fuzz a Python script directly and would struggle even if forced because:
	1)Instrumentation Requirement: AFL++ relies on compile-time instrumentation to track code coverage. Python scripts are not compiled binaries, so AFL++ cannot instrument them directly.
	2)Targeting the Interpreter, Not the Script: If AFL++ were to proceed, it would fuzz the complex Python interpreter, leading to inefficient script testing.
	3)Lack of Visibility into Script Behaviour: AFL++ cannot observe code coverage within the Python script itself.

2. What commands did you use to prepare the program for fuzzing and to run your fuzz tester?
Answer:
```
cython3 --embed -o maze2.c maze2.py
afl-gcc -I /usr/include/python3.8 -o maze2 maze2.c -l python3.8
echo -ne '\x00' > inputs2/initial
screen -dmS afl-master afl-fuzz -i inputs2 -o out2 -M master -- ./maze2
screen -dmS afl-slave1 afl-fuzz -i inputs2 -o out2 -S slave1 -- ./maze2
screen -dmS afl-slave2 afl-fuzz -i inputs2 -o out2 -S slave2 -- ./maze2
```

3. Explain any options, flags or switches you used in the commands.
Answer: 
cython3:
	--embed: generate a main() function for standalone compilation.
	-o maze2.c: define the output file.
	maze2.py: the input file.
afl-gcc:
	-I /usr/include/python3.8: include Python headers.
	-o maze2: define the output file.
	-l python3.8: Link against the Python library.
	 maze2.c: the input file.
echo:
	-n: do not append a newline
	-e: enable interpretation of the following backslash
	'\x00' > inputs/initial: write a string to file inputs/initial	
screen:
	-d: Detach the elsewhere running screen (and reattach here).
	-m: ignore $STY variable, do create a new screen session.
	-S afl-xxx: Name this session to "afl-xxx".
afl-fuzz:
	-i inputs2/: the inputs folder: input2
	-o out2/: the output file: out2
	-M master: define a master instance
	-S slave1/slave2: define a slave instance
	--: stop parsing options here, the rest is the target program
	./maze2: the target file

4. Give a hexdump of an input that corresponds to a solution to the maze
Answer:

00000000  20 10 3e 3e ff ff ff ff  ff ff ff ff ff 3e 3e 02  | .>>.........>>.|
00000010  00 3e 3e 2f 38 3e 00 10  3e 40 3e 4d 3e 3c 3e 3e  |.>>/8>..>@>M><>>|
00000020  3f 3e 3e ff ff ff ff ff  38 3e be 3e 00 10 3e 40  |?>>.....8>.>..>@|
00000030  3e 43 3e 3c 3e 3e 3e 3e  3e 3e 3e ff ff ff ff ff  |>C><>>>>>>>.....|
00000040  38 3e be 3e 00 10 3e 40  3e 43 3e 3c 3e 3e 3e 3e  |8>.>..>@>C><>>>>|
00000050  00 80 ff ff 3e 4e 3e 38  3e be 3e 00 10 3e 40 3e  |....>N>8>.>..>@>|
00000060  ff ff ff ff ff ff ff ff  ff ff ff 03 00 ff ff ff  |................|
00000070  ff ff 30 00 10 ff ff 3e  3e c4 c4 3e 3e 3e 3e 3e  |..0....>>..>>>>>|
00000080  5c 3e 7f ff 3e 3e 2e 3e  41 3e 3c 3e              |\>..>>.>A><>|
0000008c