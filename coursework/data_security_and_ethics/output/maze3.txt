1. Examine one of the inputs that causes a crash. What problems does this indicate with the program maze3.c and with the software development practices of the company?
Answer:
One of the crashing inputs is 
" <?xmodinl ?>
 <path>
 <step>1</step>
 <step>10</step>
 <step>20</step>
</path>".
Obviously this is not the answer to the maze, it just doesn't conform to the XML format.
This indicates:
	1) maze3.c issues: The code can only accept input in standard XML format. However, most of the data sets generated by afl-fuzz testing based on its own strategy do not conform to the XML standard. This leads to a lot of noise, making it difficult to achieve the purpose of fuzz testing.
	2) company practices: In real scenarios, the situation is more complex and changeable. It is necessary to make some customized changes to fuzz testing for special scenarios in order to achieve practical purposes.

2. Why is this approach to fuzz testing unlikely to find a solution to the maze in a reasonable amount of time?
Answer:
AFL++ struggles because:
	1) mismatched input format: the inputs generated by AFL++ based policy are not targeted at the maze problem, which leads lots of irrelevant data and verification time. Targeted generation of input in XML format can alleviate this problem.
	2) Unlimited solution space: the volume of the unrestricted search space increases exponentially. In the maze, there are many restrictions that can prune the path in advance, greatly reducing the search space.

3. What commands did you use to prepare the program for fuzzing and to run your fuzz tester?
Answer:
```
mkdir inputs3
echo -ne '<path><step>1</step><step>2</step><step>3</step><step>4</step></path>' > inputs3/initial
echo -ne 'b="<path>"\nc="</path>"\nd="<step>"\ne="</step>"\nn1="1"\nn2="2"\nn3="3"\nn4="4"\nn5="5"\nn6="6"\nn7="7"\nn8="8"\nn9="9"\nn0="0"' > maze3.dict
afl-gcc -o maze3 maze3.c
afl-fuzz -i inputs3 -o out3 -x maze3.dict -- ./maze3
```

4. Explain any options, flags or switches you used in the commands
Answer:
echo:
	-n: do not append a newline
	-e: enable interpretation of the following backslash
	'b="<path>"...' > maze3.dict: write a xml dictionary to a file maze3.dict
afl-gcc:
	-o maze3: the output file
	maze3.c: the input file
afl-fuzz:
	-i inputs3/: the inputs folder: input3
	-o out3/: the output file: out3
	-x maze3.dict: define the xml dictionary
	--: stop parsing options here, the rest is the target program
	./maze3: the target file