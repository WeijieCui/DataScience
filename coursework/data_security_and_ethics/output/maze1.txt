1. What commands did you use to prepare the program for fuzzing and to run AFL++?
Answer:
The commands used as follow:
```
mkdir inputs
echo -ne '\x00\x01\x02\x03' > inputs/initial
afl-gcc -o maze1 maze1.c
afl-fuzz -i inputs/ -o out/ -- ./maze1

```


2. What test case(s) did you use as input to AFL++?

Answer: I use a set of hexadecimal string "\x00\x01\x02\x03" as input. AFL++ will refer to this sample and automatically make some adjustments to generate more test cases.

3. How did you choose your test case(s)?
Answer: As the title says, for each byte read, this program will call a function corresponding to moving one step through the maze. So the test cases are some specific combination of bytes.


4. Give a hexdump of an input that corresponds to a solution to the maze.
Answer:
The hexdump of an input by commend "hexdump -C out/crashes/id:000001,sig:06,src:000329,time:110563,op:havoc,rep:32":

00000000  56 77 77 77 5f 10 00 20  77 0e 31 00 00 75 77 77  |Vwww_.. w.1..uww|
00000010  91 01 7f ff 77 5f 77 00  00 00 80 00 00 00 77 7f  |....w_w.......w.|
00000020  ff 77 5f 77 00 00 77 00  20 77 00 77 77 ff 77 00  |.w_w..w. w.ww.w.|
00000030  20 77 1b 1b 00 77 77 76  6a df 80 00 de ff ff ff  | w...wwvj.......|
00000040  77 77 76 77 de 20 5e 0e  80 00 86 70 6a 00 77 77  |wwvw. ^....pj.ww|
00000050  00 20 77 00 77 77 76 77  00 20 77 1b 1b 00 77 77  |. w.wwvw. w...ww|
00000060  77 6a 00 77 77 00 1f 77  0e 1b 77 88 49           |wj.ww..w..w.I|
0000006d